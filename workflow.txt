~~Important code design notes~~

- Player action system

- Entity action system
    - Entity has a default action that either it does, or the player does to it. This may become a problem, but keeps scope tiny.
    - The rate which modifys how often the default 'action' happens is defined by .action_rate.
        E.g., for Cut, this is how many seconds it takes for the player to make a cut. For Growth, this is the seconds for it to grow an amount.
        You just kind of have to know what you'll use this .action_rate for in each case.
    - Every game update, the entity action queue is fulfilled.
        - The entity action queue is stored on the current map. It has enough space for each tile on the map
        - This accessed through '&game.current_map->entity_queue'.
        - The map and tile x y are passed to the add_to_map_queue function. In this, the entity is selected from the map's tiles.
        - Pointers to Entities are pushed onto the queue throughout the update loop. The default action is performed.
            - The idea is entities which act on their own accord (e.g., stump growing) get pushed to the action queue as neeeded.
            - The player can trigger an entity's action to be pushed onto the queue.
            - Actions are pushed onto the first available slot i.e. the first NULL value
    - Every update, the entire map entity queue is looped through and a switch handle's the action (Entity's default action)
    - When an update is complete (conditions have been met), remember to set the relevant queue index to NULL and reduce the .count of the queue.    

- Map system
    - 
- Tile system
    - Tiles store references to their .current entity and .previous entity . 
        - For environmental objects which have 2 states (e.g., Tree and Stump), these can be thought of as the 2 possible states
            - This means when one state ends, the .current and .previous entity can swap.
        - Note, these aren't pointers - they are references to what entity is on the tile.
    - When you interact with an entity, you must interact with a pointer to the entity accessed from the tile
        - e.g., some Tile* t, update entity with t->entity.
    - Tiles are stored in a 2D array on a Map. I guess the memory for each tile is allocated when the map is allocted

- Adding entities

- Inventory
    - There are two inventory sources. The game has an inventory_count[NUM_DROPS] array which has the amount of each game drop currently in inventory
    - The ui has an inventory.slots which is the "bag", e.g., whats in the inventory currently.
    - When adding to inventory, both get updated. The inventory_count provides easy access to index the amount of an item currently.
- UI
    - When adding new UI, check to see if it needs to be added to the UI shapes rectangle.
        - This is the elements to see when checking if mouse is hovering a UI element
        - This may also need some additional state logic to confirm e.g. only check mouse-clicks over job offer button if a job.status == OFFERED
            - i.e, we dont want UI clicks to do anything if the UI isn't actively on the screen

- Hover text
    - Pass in 0.0f for messages that stay hovered till next time hover text changes
    - Pass in a float (in seconds) for messages with a duration
    - Note max message size
    - Note char buffer shenanigans with set_entity_action_text
        - (currently, a leading '\0' indicates that there is no message);
    - the set_hover_text function will make hover text inactive if msg is NULL or msg[0] is '\0' (null-terminate)
